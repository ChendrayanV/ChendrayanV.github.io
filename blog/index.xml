<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on iAutomate</title>
    <link>/blog/</link>
    <description>Recent content in Blog on iAutomate</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collection of Azure Resource Graph Query</title>
      <link>/blog/collection-of-azure-resource-graph-query/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/collection-of-azure-resource-graph-query/</guid>
      <description>Introduction This blog post is to share the Azure Resource Graph query I developed at my workplace. I have used this with PowerShell and Azure Monitor.
Azure Virtual Machines PowerState $Query = &amp;#34;Resources | where type =~ &amp;#39;microsoft.compute/virtualMachines&amp;#39; | project id, VMName = tostring(name), Location = tostring(location), ResourceGroup = tostring(resourceGroup), SubscriptionId = tostring(subscriptionId), OSType = tostring(properties.storageProfile.osDisk.osType), PowerState = iff( tostring( split( properties.extended.instanceView.powerState.code, &amp;#39;/&amp;#39; )[1] ) != &amp;#39;&amp;#39;, tostring(split(properties.extended.instanceView.powerState.code, &amp;#39;/&amp;#39;)[1]), &amp;#39;transitioning&amp;#39; )&amp;#34; $PageSize = 1000 $Iteration = 0 $SearchParams = @{ Query = $($Query) First = $PageSize } [System.</description>
    </item>
    
    <item>
      <title>Using Azure Monitor Workbook at the workplace - Part 1</title>
      <link>/blog/using-azure-monitor-workbook-at-the-workplace-part-1/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/using-azure-monitor-workbook-at-the-workplace-part-1/</guid>
      <description>Introduction Azure Monitor Workbook is one of my favorite services in Azure Cloud. Why? I use to share scripts/queries with the operations team for reportings. During audits, I get more development works. So, I thought of using the Azure Monitor workbooks to serve the purpose. Indeed, the queries I built is tailor-made for my environment. However, through this blog post, I can share the nuances and some ready to use solutions.</description>
    </item>
    
    <item>
      <title>Deploy Azure Function App using Project Bicep</title>
      <link>/blog/deploy-azure-function-app-using-project-bicep/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/deploy-azure-function-app-using-project-bicep/</guid>
      <description>References Refer to the below links to know more about the project bicep
  GitHub
 Repository Docs Examples Tutorials Specifications    YouTube
 Intro to Azure&amp;rsquo;s Project Bicep with Brendan Burns and team Project Bicep Demo at Ignite 2020 by Mark Russinovich Project Bicep and ARM Templates November 2020 Update    Introduction Project Bicep is growing well, and I am using it at my workplace to build proof of concepts environments.</description>
    </item>
    
    <item>
      <title>Retrieve a list of Azure VM which aren&#39;t protected with just-in-time network access control</title>
      <link>/blog/list-of-azure-vm-which-has-no-jit-enabled/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/list-of-azure-vm-which-has-no-jit-enabled/</guid>
      <description>Introduction I was asked to build a PowerShell script to retrieve Azure virtual machines with no Just In Time (JIT) access enabled. Yes, it’s for the security auditing team. I searched in PowerShell Gallery, TechNet Gallery, and other sources and didn’t find one. So, I developed a script that may help you!
Solution First, I thought of retrieving virtual machines and query against the JIT Access Policy REST API endpoint. But it&amp;rsquo;s not required!</description>
    </item>
    
    <item>
      <title>Get started with project bicep</title>
      <link>/blog/get-started-with-project-bicep/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/get-started-with-project-bicep/</guid>
      <description>References Refer to the below links to know more about the project bicep
  GitHub
 Repository Docs Examples Tutorials Specifications    YouTube
 Intro to Azure&amp;rsquo;s Project Bicep with Brendan Burns and team Project Bicep Demo at Ignite 2020 by Mark Russinovich Project Bicep and ARM Templates November 2020 Update    Introduction As a first step, we need to install the bicep tools on our local computer.</description>
    </item>
    
    <item>
      <title>Logging Service Now Requests using Event Grid Trigger</title>
      <link>/blog/logging-service-now-requests-using-event-grid-trigger/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/logging-service-now-requests-using-event-grid-trigger/</guid>
      <description>Introduction A colleague of mine asked a solution for raising a service request in SNOW (Service Now) for each NSG rule creation and deletion. I requested to develop a service now catalog and allow the system to work with NSG. That means, from SNOW to Azure connectivity through REST API. However, the ask is the other way around. If a user creates/deletes the NSG rule in the portal, log a REQ with the minimum information</description>
    </item>
    
    <item>
      <title>azure devops pipeline to send files through email with no marketplace extension</title>
      <link>/blog/azure-devops-pipeline-to-send-files-through-email-with-no-marketplace-extension/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/azure-devops-pipeline-to-send-files-through-email-with-no-marketplace-extension/</guid>
      <description>Introduction I was developing a PowerShell script to send Azure inventory through email, which generates a Word output with charts and tables. So, I thought of using Open XML, I used for SharePoint document library reporting (A few years ago), I searched GitHub and found a great PowerShell module PSWriteWord, and docs are super cool. Yes, this blog post is to show you the simple steps to generate a word document through Azure DevOps pipeline.</description>
    </item>
    
    <item>
      <title>MY FIRST EXPERIENCE WITH THE AZURE DURABLE FUNCTIONS</title>
      <link>/blog/my-first-experience-with-the-azure-durable-functions/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/my-first-experience-with-the-azure-durable-functions/</guid>
      <description>Introduction Of late, I got a requirement to start the Azure runbooks programmatically (start a runbook through another runbook), and as a PowerShell fan, I said, “Start-AzAutomationAccountRunBook” is one best way to achieve it. An hour later, I got a call to build a script that waits until the job completes and gets the output. Here is a quick way “-Wait” parameter. Solved the issue? Yes! Now, it’s time for us to deliver a REST API endpoint, which is required to invoke in an Azure Pipeline for the business process.</description>
    </item>
    
    <item>
      <title>Retrieve unattached Azure VM disks using PowerShell &amp; Azure Resource Graph</title>
      <link>/blog/retrieve-unattached-azure-vm-disks-using-powershell-azure-resource-graph/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/retrieve-unattached-azure-vm-disks-using-powershell-azure-resource-graph/</guid>
      <description>Introduction As part of the cost saving project task, I developed a PowerShell script to retrieve UNATTACHED disks. I used JOIN operator in this code to get a few tag information from the respective resource group.
 Replace value for the {TAGNAME}.
 $Query = &amp;#34;Resources | where type =~ &amp;#39;Microsoft.Compute/disks&amp;#39; | where properties.diskState =~ &amp;#39;Unattached&amp;#39; | project id, name, subscriptionId, resourceGroup, diskInGB = properties.diskSizeGB, diskState = properties.diskState, timeCreated = properties.</description>
    </item>
    
    <item>
      <title>Create Azure DevOps Service Connection with Certificate using REST API</title>
      <link>/blog/create-service-connection-with-certificate-using-rest-api/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/create-service-connection-with-certificate-using-rest-api/</guid>
      <description>Introduction I have no access to my organization DevOps due to unfortunate technical issues, but that didn’t stop me from working. This morning I was on a call with a business owner who asked me to show the steps to create service connections with the certificate. Yes, I have to use the OPEN SSL tool to convert the PFX to PEM, and it was a bit difficult for me to walk him through the steps remotely.</description>
    </item>
    
    <item>
      <title>How Azure DevOps REST API helped me during outage of the VPN?</title>
      <link>/blog/how-azure-devops-rest-api-helped-me-during-outage-of-the-vpn/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-azure-devops-rest-api-helped-me-during-outage-of-the-vpn/</guid>
      <description>Introduction There is always an alternative is the apt statement to start this blog post! Yes, I got trouble in VPN and lost connection to most of our internal portal, and one among that is Azure DevOps (Formerly VSTS), where the code resides. Positively, no hindrances in accessing Outlook and Teams over mobile. All I need is to continue the work on code, work items and send status report.
 REST API is the savior!</description>
    </item>
    
    <item>
      <title>DEPLOYING AZURE FUNCTION APP - EXTERNAL GIT</title>
      <link>/blog/deploying-azure-function-app-external-git/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/deploying-azure-function-app-external-git/</guid>
      <description>Introduction I bet most of you don’t need this! Having said that, if your organization has Azure DevOps (Formerly VSTS) in directory A and Azure on directory B. Then, deploying Azure Function App using external git may help you.
Why not Zip deploy? Yes, that’s the optimal way to do! In my case, the roller coaster ride for simple requirements is quite common. Consider, Azure Functions source code is available with vendors, and it’s an end to end solution to be deployed at your workplace in a shorter time, and building a pipeline may take a few hours or process may delay the deployment.</description>
    </item>
    
  </channel>
</rss>
